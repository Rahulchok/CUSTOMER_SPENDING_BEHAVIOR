# -*- coding: utf-8 -*-
"""WALMAT CASE STUDY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QYIIshxXhlYuYEAOpzE9J_ZE7MW7vPeh

##The aim is to find E-Commerce Customer spending Behavior

# Importing libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""# Importing Data set"""

df=pd.read_csv("https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/001/293/original/walmart_data.csv?1641285094")
df

"""# **Basic matrics**"""

df.shape

df.info()

df.describe()

df.describe(include="object")

df.nunique(axis=0)

df["Product_Category"].value_counts()

"""# Null value detection"""

df.isnull().sum()

"""##Outlier detection"""

box_plot =sns.boxplot(x=df["Gender"],y=df["Purchase"],hue=df["Marital_Status"])
medians = df.groupby(['Gender'])['Purchase'].median()
vertical_offset = df['Purchase'].median()*0.0005 # offset from median for display

for xtick in box_plot.get_xticks():
    box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick], 
            horizontalalignment='center',size=15,color='black',weight='semibold')
plt.legend(loc="upper right")
plt.title("Gender vs Purchase")
plt.show()

"""# Distribution of data"""

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Purchase', kde=True)
plt.show()

"""# Outliers"""

outliers = [] 
def detect_outliers_iqr(data):
    data = sorted(data)
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    # print(q1, q3)
    IQR = q3-q1
    lwr_bound = q1-(1.5*IQR)
    upr_bound = q3+(1.5*IQR)
    # print(lwr_bound, upr_bound)
    for i in data: 
        if (i<lwr_bound or i>upr_bound):
            outliers.append(i)
    return outliers# Driver code
sample_outliers = detect_outliers_iqr(df["Purchase"])
print("Outliers from IQR method:{} \n".format(sample_outliers))
print("Number Outliers from IQR method: ", len(sample_outliers))

"""## Outlier Treatment"""

# Computing 10th, 90th percentiles and replacing the outliers
tenth_percentile = np.percentile(df["Purchase"], 10)
ninetieth_percentile = np.percentile(df["Purchase"], 90)
# print(tenth_percentile, ninetieth_percentile)
df['Purchase']=df['Purchase'].map(lambda x:tenth_percentile if x<tenth_percentile else x).map(lambda x:ninetieth_percentile if x>ninetieth_percentile else x)
df

"""# Treated Outliers"""

box_plot=sns.boxplot(data=df,x="Gender",y="Purchase",hue="Marital_Status")
medians = df.groupby(['Gender'])['Purchase'].median()
vertical_offset = df['Purchase'].median()*0.0005 # offset from median for display

for xtick in box_plot.get_xticks():
    box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick], 
            horizontalalignment='center',size=15,color='black',weight='semibold')
plt.legend(loc="upper right")
plt.title("Gender vs Purchase after outlier treatment")
plt.show()

"""##Univariate Analysis

# Non graphical Analisis
"""

categorical_cols = ['Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status', 'Product_Category']
df[categorical_cols].melt().groupby(['variable', 'value'])[['value']].count()

df_gender=df.groupby("Gender")["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
df_gender

sdf=df.groupby(["Age"])["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
sdf.head()

city=df.groupby(["City_Category"])["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
city

data=df.copy()
data["Marital_Status"]=data["Marital_Status"].map(lambda x:"Unmarried" if x==0 else "Maried")
Marital_Status=data.groupby(["Marital_Status"])["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
Marital_Status

Product_Category=df.groupby(["Product_Category"])["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
Product_Category.head()

Occupation=df.groupby(["Occupation"])["Product_ID"].count().to_frame().sort_values(by="Product_ID",ascending=False).reset_index().rename(columns={"Product_ID":"User"})
Occupation.head()

"""# Graphical Analysis"""

plt.pie(x=df_gender["User"],
 colors=['Green','orange'],
 labels=['Male','Female'],
 autopct='%1.2f%%',
 startangle=90,
 explode=[0.1,0.1],
 shadow=True)
plt.title('User Gender wise')
plt.legend(loc="upper left")

"""there are 75.31% male customer and 24.69% female customer"""

plt.pie(x=sdf["User"],labels=['26-35','36-45',"18-25","46-50","51-55","55+","0-17"],autopct='%1.2f%%',explode=[0.2,0.2,0.2,0,0,0,0],shadow=True)
plt.title('User Age wise')

plt.show()

"""age group 26-35 age group customer is most which is 39.92% followed by 36-45 age group(20%) and 18-25 age group(18.12%)"""

plt.pie(x=city["User"],labels=['B','C',"A"],autopct='%1.2f%%',explode=[0.1,0.1,0.1],shadow=True)
plt.title('User city wise')

plt.show()

"""most of the customers are belongs to B catagory states which is around 42.03% followed by C catagory states (31.12%) and A catagory states(26.85%) """

plt.pie(x=Marital_Status["User"],labels=['Married','Unmarried'],autopct='%1.2f%%',explode=[0.1,0.1],shadow=True)
plt.title('User Marital_Status wise')

plt.show()

"""most of the customers are maried which is around 59.03%"""

sns.barplot(x=Product_Category["Product_Category"],y=Product_Category["User"])

"""Product catgory 5,1,8 are the hero products"""

sns.barplot(x=Occupation["Occupation"],y=Occupation["User"])

"""most of the customest are having occupation category of 4,0,7 are the customer of walmat"""

fig=plt.figure(figsize=(20,20))
plt.subplot(3,2,1)
plots=sns.histplot(x=df["Gender"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Gender wise user')

plt.subplot(3,2,2)
plots=sns.countplot(x=df["Age"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Age wise user')


plt.subplot(3,2,3)
plots=sns.countplot(x=df["City_Category"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('City_Category wise user')


plt.subplot(3,2,4)
plots=sns.countplot(x=data["Marital_Status"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Marital_Status wise user')

plt.subplot(3,2,5)
plots=sns.distplot(x=df["Product_Category"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Product_Category wise user')

plt.subplot(3,2,6)
plots=sns.countplot(x=df["Occupation"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va="center",
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.subplots_adjust(hspace=0.25)    
plt.title('Occupation wise user')
fig.suptitle("Graphical Univariate analysis")
plt.show()

"""# Purchase behavior"""

df.groupby(["Gender"]).agg({"Age":"count","Purchase":"mean"}).reset_index().rename(columns={"Age":"Number_of_orders","Purchase":"Mean_Purchase_value"})

"""the men purchase per transaction is higher compare to female(8673.41) then man(9278.34)"""

amt_df = df.groupby(['User_ID', 'Gender'])[['Purchase']].mean().round(2)
amt_df = amt_df.reset_index()

sns.pairplot(data=amt_df,hue="Gender")

"""the mean purchase per transaction for male is widely distributed from a range between 5000 to 1500 where as for female the range is in between 5000to 14000

##Central limit theorem & BOOT strap method for finding out confidance interval

# Male vs Female Purchase behavior
"""

amt_df['Gender'].value_counts().to_frame().reset_index().rename(columns={"index":"Gender","Gender":"Customer"})

"""# Data distribution """

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(data=amt_df[amt_df['Gender']=='M'],x="Purchase",bins=35,kde=True)
plt.title('Number of purchase for Male customer')
plt.subplot(1,2,2)
sns.histplot(data=amt_df[amt_df['Gender']=='F'],x="Purchase",bins=35,kde=True)
plt.title('Number of purchase for Female customer')

male_avg = amt_df[amt_df['Gender']=='M']['Purchase'].mean()
female_avg = amt_df[amt_df['Gender']=='F']['Purchase'].mean()

print("Average amount spend by Male customers per transaction: {:.2f}".format(male_avg))
print("Average amount spend by Female customers per transaction: {:.2f}".format(female_avg))

"""# Bootstrapping"""

male_df = amt_df[amt_df['Gender']=='M']
female_df = amt_df[amt_df['Gender']=='F']
genders = ["M", "F"]

male_sample_size = len(amt_df[amt_df['Gender']=='M'])
female_sample_size = len(amt_df[amt_df['Gender']=='F'])
num_repitions = 10000
male_means = []
female_means = []

for _ in range(num_repitions):
    male_mean = male_df.sample(male_sample_size, replace=True)['Purchase'].mean()
    female_mean = female_df.sample(female_sample_size, replace=True)['Purchase'].mean()
    
    male_means.append(male_mean)
    female_means.append(female_mean)

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(male_means,bins=35,kde=True)
plt.title('distribution of mean for Male customer')
plt.subplot(1,2,2)
sns.histplot(female_means,bins=35,kde=True)
plt.title('distribution of mean for Female customer')

"""# Confidance Interval"""

print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :{} with 95% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(male_means,[2.5,97.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :{} with 95% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(female_means,[2.5,97.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :{} with 90% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(male_means,[5,95])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :{} with 90% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(female_means,[5,95])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :{} with 99% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(male_means,[0.5,99.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :{} with 99% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(female_means,[0.5,99.5])]) )

"""# Visualization of Confidance Interval"""

l=[1,5,10]
plt.figure(figsize=(20,20))
x=1
for i in l:
  a,b=np.percentile(male_means,[0.5*i,(100-0.5*i)])
  c,d=np.percentile(female_means,[0.5*i,(100-0.5*i)])
  fig=plt.figure(figsize=(10,5))
  plt.subplot(3,2,x)
  sns.histplot(male_means,bins=35,kde=True)
  plt.xticks([a,b],rotation=60)
  plt.title(' mean for Male customer (CI {}% )'.format(100-i))
  plt.vlines((a, b),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
  
  x+=1
  plt.subplot(3,2,x)
  sns.histplot(female_means,bins=35,kde=True)
  plt.xticks([c,d],rotation=60)
  plt.title(' mean for Female customer (CI {}%)'.format(100-i))
  plt.vlines((c, d),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
    
  plt.subplots_adjust(hspace=0.5)
  x+=1

plt.show()

"""by Boot Strapped Method - Mean of sample means of amount spend per transaction are not over lapped eatch other that means the mean spending for male and female is diffrent

# Central limit theorem
"""

male_df = amt_df[amt_df['Gender']=='M']
female_df = amt_df[amt_df['Gender']=='F']


male_sample_size =1000
female_sample_size = 1000
num_repitions = 10000
male_means = []
female_means = []

for _ in range(num_repitions):
    male_mean = male_df.sample(male_sample_size)['Purchase'].mean()
    female_mean = female_df.sample(female_sample_size)['Purchase'].mean()
    
    male_means.append(male_mean)
    female_means.append(female_mean)

"""# Data distribution"""

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(male_means,bins=35,kde=True)
plt.title('Distribution of mean for Male customer')
plt.subplot(1,2,2)
sns.histplot(female_means,bins=35,kde=True)
plt.title('Distribution of mean for Female customer')
plt.show()

"""# Confidence Interval"""

from scipy.stats import norm
ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
for i in ci:
  male_margin_of_error_clt = i*male_df['Purchase'].std()/np.sqrt(len(male_df))
  male_sample_mean = male_df['Purchase'].mean()
  male_lower_lim = male_sample_mean - male_margin_of_error_clt
  male_upper_lim = male_sample_mean + male_margin_of_error_clt

  female_margin_of_error_clt = i*female_df['Purchase'].std()/np.sqrt(len(female_df))
  female_sample_mean = female_df['Purchase'].mean()
  female_lower_lim = female_sample_mean - female_margin_of_error_clt
  female_upper_lim = female_sample_mean + female_margin_of_error_clt

  print("Population mean by Central limit theorem - Male  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format( round((norm.cdf(i)-(1-norm.cdf(i)))*100) ,male_lower_lim, male_upper_lim))
  print("Population mean by Central limit theorem - Female  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format(round((norm.cdf(i)-(1-norm.cdf(i)))*100),female_lower_lim, female_upper_lim))

"""# Vissualization of Confidance interval"""

ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
plt.figure(figsize=(10,10))
x=1
for i in ci:
  male_margin_of_error_clt = i*male_df['Purchase'].std()/np.sqrt(len(male_df))
  male_sample_mean = male_df['Purchase'].mean()
  male_lower_lim = male_sample_mean - male_margin_of_error_clt
  male_upper_lim = male_sample_mean + male_margin_of_error_clt
  plt.subplot(3,2,x)
  sns.histplot(male_means,bins=35,kde=True)
  plt.xticks([male_lower_lim,male_upper_lim],rotation=60)
  plt.title(' mean for Male customer (CI {}% )'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((male_lower_lim, male_upper_lim),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
  
  x+=1
  female_margin_of_error_clt = i*female_df['Purchase'].std()/np.sqrt(len(female_df))
  female_sample_mean = female_df['Purchase'].mean()
  female_lower_lim = female_sample_mean - female_margin_of_error_clt
  female_upper_lim = female_sample_mean + female_margin_of_error_clt

  plt.subplot(3,2,x)
  sns.histplot(female_means,bins=35,kde=True)
  plt.xticks([female_lower_lim,female_upper_lim],rotation=60)
  plt.title(' mean for Female customer (CI {}%)'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((female_lower_lim, female_upper_lim),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))

  plt.subplots_adjust(hspace=0.5)
  
  x+=1
plt.suptitle("Confidance Interval by Center line method")

"""by CLT method of analysis- Mean of sample means of amount spend per transaction are not over lapped eatch other that means the mean spending for male and female is diffrent

# Central limit theorem Changeing the population sample size reduced to minimum
"""

male_df = amt_df[amt_df['Gender']=='M']
female_df = amt_df[amt_df['Gender']=='F']

#changeing the sample size to its minimum value   
male_sample_size =30
female_sample_size = 30
num_repitions = 10000
male_means = []
female_means = []

for _ in range(num_repitions):
    male_mean = male_df.sample(male_sample_size)['Purchase'].mean()
    female_mean = female_df.sample(female_sample_size)['Purchase'].mean()
    
    male_means.append(male_mean)
    female_means.append(female_mean)

"""# Data distribution"""

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(male_means,bins=35,kde=True)
plt.title('Distribution of mean for Male customer')
plt.subplot(1,2,2)
sns.histplot(female_means,bins=35,kde=True)
plt.title('Distribution of mean for Female customer')
plt.show()

"""# Confidance Interval"""

from scipy.stats import norm
ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
for i in ci:
  male_margin_of_error_clt = i*male_df['Purchase'].std()/np.sqrt(len(male_df))
  male_sample_mean = male_df['Purchase'].mean()
  male_lower_lim = male_sample_mean - male_margin_of_error_clt
  male_upper_lim = male_sample_mean + male_margin_of_error_clt

  female_margin_of_error_clt = i*female_df['Purchase'].std()/np.sqrt(len(female_df))
  female_sample_mean = female_df['Purchase'].mean()
  female_lower_lim = female_sample_mean - female_margin_of_error_clt
  female_upper_lim = female_sample_mean + female_margin_of_error_clt

  print("Population mean by Central limit theorem changeing the sample size- Male  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format( round((norm.cdf(i)-(1-norm.cdf(i)))*100) ,male_lower_lim, male_upper_lim))
  print("Population mean by Central limit theorem changeing the sample size - Female  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format(round((norm.cdf(i)-(1-norm.cdf(i)))*100),female_lower_lim, female_upper_lim))

"""# Vissualization of confidance interval"""

ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
plt.figure(figsize=(10,10))
x=1
for i in ci:
  male_margin_of_error_clt = i*male_df['Purchase'].std()/np.sqrt(len(male_df))
  male_sample_mean = male_df['Purchase'].mean()
  male_lower_lim = male_sample_mean - male_margin_of_error_clt
  male_upper_lim = male_sample_mean + male_margin_of_error_clt
  plt.subplot(3,2,x)
  sns.histplot(male_means,bins=35,kde=True)
  plt.xticks([male_lower_lim,male_upper_lim],rotation=60)
  plt.title(' mean for Male customer (CI {}% )'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((male_lower_lim, male_upper_lim),0, 800, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
  
  x+=1
  female_margin_of_error_clt = i*female_df['Purchase'].std()/np.sqrt(len(female_df))
  female_sample_mean = female_df['Purchase'].mean()
  female_lower_lim = female_sample_mean - female_margin_of_error_clt
  female_upper_lim = female_sample_mean + female_margin_of_error_clt

  plt.subplot(3,2,x)
  sns.histplot(female_means,bins=35,kde=True)
  plt.xticks([female_lower_lim,female_upper_lim],rotation=60)
  plt.title(' mean for Female customer (CI {}%)'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((female_lower_lim, female_upper_lim),0, 800, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))

  plt.subplots_adjust(hspace=0.5)
  
  x+=1
plt.suptitle("Confidance Interval by Center line method with diffrent sample")

"""# Customer behavior based on Marital status

for change in sample size(if reduced) then the distribution of means is more but the confidance interval dose not vary much
"""

mat_df=data.groupby(["User_ID","Marital_Status"])["Purchase"].mean().round(2).to_frame().reset_index().rename({"Purchase":"Mean_Purchase"})
mat_df.head()

mat_df['Marital_Status'].value_counts().to_frame().reset_index().rename(columns={"index":"Marital_Status","Marital_Status":"Customer"})

"""# Distribution of data"""

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(data=mat_df[mat_df['Marital_Status']=='Unmarried'],x="Purchase",bins=35,kde=True)
plt.title('Number of purchase for Unmarried customer')
plt.subplot(1,2,2)
sns.histplot(data=mat_df[mat_df['Marital_Status']=='Maried'],x="Purchase",bins=35,kde=True)
plt.title('Number of purchase for Maried customer')

Unmarried_avg = mat_df[mat_df['Marital_Status']=='Unmarried']['Purchase'].mean()
Maried_avg = mat_df[mat_df['Marital_Status']=='Maried']['Purchase'].mean()

print("Average amount spend by Unmarried customers per transaction: {:.2f}".format(Unmarried_avg))
print("Average amount spend by Maried customers per transaction: {:.2f}".format(Maried_avg))

"""# Bootstrapping"""

Unmarried_df = mat_df[mat_df['Marital_Status']=='Unmarried']
Maried_df = mat_df[mat_df['Marital_Status']=='Maried']


maried_sample_size = len(mat_df[mat_df['Marital_Status']=='Maried'])
Unmarried_sample_size = len(mat_df[mat_df['Marital_Status']=='Unmarried'])
num_repitions = 10000
maried_means = []
unmaried_means = []

for _ in range(num_repitions):
    maried_mean = Maried_df.sample(maried_sample_size, replace=True)['Purchase'].mean()
    unmaried_mean = Unmarried_df.sample(Unmarried_sample_size, replace=True)['Purchase'].mean()
    
    maried_means.append(maried_mean)
    unmaried_means.append(unmaried_mean)

"""# Distribution of data"""

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(maried_means,bins=50,kde=True)
plt.title('Distribution of mean for Maried customer')
plt.subplot(1,2,2)
sns.histplot(unmaried_means,bins=50,kde=True)
plt.title('Distribution of mean for Unmaried customer')
plt.show()

"""# Confidance Inteval"""

print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :{} with 95% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(maried_means,[2.5,97.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :{} with 95% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(unmaried_means,[2.5,97.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :{} with 90% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(maried_means,[5,95])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :{} with 90% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(unmaried_means,[5,95])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :{} with 99% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(maried_means,[0.5,99.5])]) )
print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :{} with 99% confidance interval  ".format( [ '%.2f' % elem for elem in np.percentile(unmaried_means,[0.5,99.5])]) )

"""# Visualization of confidance interval"""

l=[1,5,10]
plt.figure(figsize=(20,20))
x=1
for i in l:
  a,b=np.percentile(maried_means,[0.5*i,(100-0.5*i)])
  c,d=np.percentile(unmaried_means,[0.5*i,(100-0.5*i)])
  fig=plt.figure(figsize=(10,5))
  plt.subplot(3,2,x)
  sns.histplot(maried_means,bins=35,kde=True)
  plt.xticks([a,b],rotation=60)
  plt.title(' mean for Marid customer (CI {}% )'.format(100-i))
  plt.vlines((a, b),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
  
  x+=1
  plt.subplot(3,2,x)
  sns.histplot(unmaried_means,bins=35,kde=True)
  plt.xticks([c,d],rotation=60)
  plt.title(' mean for Unmarid customer (CI {}%)'.format(100-i))
  plt.vlines((c, d),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
    
  plt.subplots_adjust(hspace=0.5)
  x+=1

plt.show()

"""by boot straped method of analysis it is seen that both for maried and unmaried population spending is almost similar

# Central limit theorem
"""

Unmarried_df = mat_df[mat_df['Marital_Status']=='Unmarried']
Maried_df = mat_df[mat_df['Marital_Status']=='Maried']


Maried_sample_size = 1000  #changeing the sample size
Unmarried_size = 1000
num_repitions = 10000
Maried_means = []
Unmarried_means = []

for _ in range(num_repitions):
    Maried_mean = Maried_df.sample(Maried_sample_size)['Purchase'].mean()
    Unmarried_mean = Unmarried_df.sample(Unmarried_size)['Purchase'].mean()
    
    Maried_means.append(Maried_mean)
    Unmarried_means.append(Unmarried_mean)

"""# Distribution of data"""

fig=plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(Maried_means,bins=35,kde=True)

plt.title('Distribution of mean for Maried customer')
plt.subplot(1,2,2)
sns.histplot(Unmarried_means,bins=35,kde=True)
plt.title('Distribution of mean for Unmaried customer')
plt.show()

"""# Confidance Interval"""

from scipy.stats import norm

ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95),norm.ppf(0.925)]
for i in ci:
  maried_margin_of_error_clt = i*Maried_df['Purchase'].std()/np.sqrt(len(Maried_df))
  maried_sample_mean = Maried_df['Purchase'].mean()
  maried_lower_lim = maried_sample_mean - maried_margin_of_error_clt
  maried_upper_lim = maried_sample_mean + maried_margin_of_error_clt

  unmarried_margin_of_error_clt = i*Unmarried_df['Purchase'].std()/np.sqrt(len(Unmarried_df))
  unmarried_sample_mean = Unmarried_df['Purchase'].mean()
  unmarried_lower_lim = unmarried_sample_mean - unmarried_margin_of_error_clt
  unmarried_upper_lim = unmarried_sample_mean + unmarried_margin_of_error_clt

  print("Population mean by Central limit theorem - Maried  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format( round((norm.cdf(i)-(1-norm.cdf(i)))*100) ,maried_lower_lim, maried_upper_lim))
  print("Population mean by Central limit theorem - Unmaried  confidence interval of {}% means per transaction: ({:.2f}, {:.2f})".format(round((norm.cdf(i)-(1-norm.cdf(i)))*100),unmarried_lower_lim, unmarried_upper_lim))

"""# Confidance interval visualization"""

ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
plt.figure(figsize=(10,10))
x=1
for i in ci:
  maried_margin_of_error_clt = i*Maried_df['Purchase'].std()/np.sqrt(len(Maried_df))
  maried_sample_mean = Maried_df['Purchase'].mean()
  maried_lower_lim = maried_sample_mean - maried_margin_of_error_clt
  maried_upper_lim = maried_sample_mean + maried_margin_of_error_clt
  plt.subplot(3,2,x)
  sns.histplot(Maried_means,bins=35,kde=True)
  plt.xticks([maried_lower_lim,maried_upper_lim],rotation=60)
  plt.title(' Maried for Male customer (CI {}% )'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((maried_lower_lim, maried_upper_lim),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))
  
  x+=1
  unmarried_margin_of_error_clt = i*Unmarried_df['Purchase'].std()/np.sqrt(len(Unmarried_df))
  unmarried_sample_mean = Unmarried_df['Purchase'].mean()
  unmarried_lower_lim = unmarried_sample_mean - unmarried_margin_of_error_clt
  unmarried_upper_lim = unmarried_sample_mean + unmarried_margin_of_error_clt

  plt.subplot(3,2,x)
  sns.histplot(Unmarried_means,bins=35,kde=True)
  plt.xticks([unmarried_lower_lim,unmarried_upper_lim],rotation=60)
  plt.title(' mean for Unmaried customer (CI {}%)'.format(round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
  plt.vlines((unmarried_lower_lim, unmarried_upper_lim),0, 550, colors = ("r", "r"),
          linestyles = ("solid", "solid","solid"))

  plt.subplots_adjust(hspace=0.5)
  
  x+=1
plt.suptitle("Confidance Interval by Center line method")

"""the purchase behaviour is almost similar as the range of spending is coincided

# Customer purchase behavior based on age
"""

age_df=data.groupby(["User_ID","Age"])["Purchase"].mean().round(2).to_frame().reset_index().rename(columns={"Purchase":"Mean_Purchase"})
age_df.head()

age_df['Age'].value_counts().to_frame().reset_index().rename(columns={"index":"Age","Age":"Customer"})

"""# Distibution  based on age"""

pivot_age_df=pd.pivot(age_df,index=["User_ID"],columns="Age",values="Mean_Purchase").reset_index()
pivot_age_df.columns.name=None
plt.figure(figsize=(15,15))
for i in enumerate(pivot_age_df):
  if i[0]!=0:
    plt.subplot(3,3,i[0])
    sns.histplot(data=pivot_age_df,x=i[1],bins=50,kde=True)
    plt.title('Age group {}'.format(i[1]))
plt.subplots_adjust(wspace=0.5,hspace=0.25)

"""# Mean spending based on age"""

for i in enumerate(pivot_age_df):
  if i[0]!=0:
    age_avg = pivot_age_df[i[1]].mean()
    print("Average amount spend by {} age group customers per transaction is {:.2f}".format(i[1],age_avg))

"""# Bootstrapping"""

x=1
for i in enumerate(pivot_age_df):
  
  if i[0]!=0:
    agee_df = age_df[age_df["Age"]==i[1]]
    age_sample_size = len(age_df[age_df["Age"]==i[1]])-50

    num_repitions = 10000
    age_means = []
    for _ in range(num_repitions):
        age_mean = agee_df['Mean_Purchase'].sample(age_sample_size, replace=True).mean()
        age_means.append(age_mean)
        
    fig=plt.figure(figsize=(15,15))
    plt.subplot(3,3,x)
      
    sns.histplot(age_means,bins=50,kde=True)
    plt.title('{} age group'.format(i[1]),fontsize=10)
    x+=1
plt.subplots_adjust(wspace=0.5,hspace=0.5)
plt.show()

"""# Confidance interval"""

for i in enumerate(pivot_age_df):
  if i[0]!=0:
    agee_df = age_df[age_df["Age"]==i[1]]
    age_sample_size = len(age_df[age_df["Age"]==i[1]])

    num_repitions = 10000
    age_means = []
    for _ in range(num_repitions):
        age_mean = agee_df.sample(age_sample_size, replace=True)['Mean_Purchase'].mean()
        age_means.append(age_mean)
    l=[1,5,10]
    for j in l:
      print("Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction by age group {} is in between :{} with {}% confidance interval  ".format( i[1],[ '%.2f' % elem for elem in np.percentile(age_means,[0.5*j,(100-0.5*j)])],(100-j)) )

"""the puchases of diffrent age group is not same because of diffrent purchase behaviours except 26-35 & 36-45 age group having same purchase behavior

# Confidance interval visualization
"""

for i in enumerate(pivot_age_df):
  if i[0]!=0:
    agee_df = age_df[age_df["Age"]==i[1]]
    age_sample_size = len(age_df[age_df["Age"]==i[1]])

    num_repitions = 10000
    age_means = []
    for _ in range(num_repitions):
        age_mean = agee_df.sample(age_sample_size, replace=True)['Mean_Purchase'].mean()
        age_means.append(age_mean)
    l=[1,5,10]
    plt.figure(figsize=(20,20))

    for k in l:
      a,b=np.percentile(age_means,[0.5*k,(100-0.5*k)])
      
      fig=plt.figure(figsize=(10,10))
      plt.subplot(7,3,i[0])
      sns.histplot(age_means,bins=35,kde=True)
      plt.xticks([a,b],rotation=60)
      plt.title(' mean for {} age group (CI {}% )'.format((i[1]),100-k))
      plt.vlines((a, b),0, 550, colors = ("r", "r"),
              linestyles = ("solid", "solid","solid"))
  
plt.show()

"""# Central limit theorem"""

age_df=data.groupby(["User_ID","Age"])["Purchase"].mean().round(2).to_frame().reset_index().rename(columns={"Purchase":"Mean_Purchase"})
age_df.head()

"""# Confidance Interval"""

from scipy.stats import norm
for j in enumerate(pivot_age_df):
  if j[0]!=0:
    Age_df = age_df[age_df["Age"]==j[1]]
    age_sample_size = len(age_df[age_df["Age"]==j[1]])-50 
    num_repitions = 10000
    age_means = []
    for _ in range(num_repitions):
        age_mean = age_df['Mean_Purchase'].sample(age_sample_size).mean()
        age_means.append(age_mean)
    
    ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
    age_std=Age_df["Mean_Purchase"]
    for i in ci:
      age_of_error_clt = i*age_std.std()/np.sqrt(len(age_std))
      age_sample_mean = Age_df['Mean_Purchase'].mean()
      age_lower_lim = age_sample_mean - age_of_error_clt
      age_upper_lim = age_sample_mean + age_of_error_clt
      
      print("Population mean by Central limit theorem--- for {} age group with confidence interval of {} % means per transaction: ({:.2f}, {:.2f})".format(j[1],round((norm.cdf(i)-(1-norm.cdf(i)))*100) ,age_lower_lim, age_upper_lim))

"""# Confidance Interval visualization"""

for j in enumerate(pivot_age_df):
  if j[0]!=0:
    Age_df = age_df[age_df["Age"]==j[1]]
    age_sample_size = 100 #
    num_repitions = 10000
    age_means = []
    for _ in range(num_repitions):
        age_mean =Age_df["Mean_Purchase"].sample(age_sample_size).mean()#
        age_means.append(age_mean)
    
    ci=[norm.ppf(0.995),norm.ppf(0.975),norm.ppf(0.95)]
    age_std=Age_df["Mean_Purchase"]
    for i in ci:
      age_of_error_clt = i*age_std.std()/np.sqrt(len(Age_df))#
      age_sample_mean = Age_df['Mean_Purchase'].mean()
      age_lower_lim = age_sample_mean - age_of_error_clt
      age_upper_lim = age_sample_mean + age_of_error_clt
      plt.figure(figsize=(20,20))
      plt.subplot(5,5,j[0])
      sns.histplot(age_means,bins=35,kde=True)
      plt.xticks([age_lower_lim,age_upper_lim],rotation=60)
      plt.title(' mean for age{} customer (CI {}%)'.format(j[1],round((norm.cdf(i)-(1-norm.cdf(i)))*100)))
      plt.vlines((age_lower_lim, age_upper_lim),0, 750, colors = ("r", "r"),
              linestyles = ("solid", "solid","solid"))
  plt.show() 
plt.suptitle("Confidance Interval by Center line method")

"""the puchases of diffrent age group is not same because of diffrent purchase behaviours except 26-35 & 36-45 age group having same purchase behavior

# Co-relation
"""

df_1=df.copy()

df_1["Gender"]=df_1["Gender"].map(lambda x :(0 if x=="F" else 1))

def age(row):
  if row["Age"]=="0-17":
    return 15
  elif  row["Age"]=='18-25':
    return 23
  elif  row["Age"]=="26-35":
   return 30
  elif  row["Age"]=="46-50":
   return 48
  elif  row["Age"]=="51-55":
   return 52
  elif  row["Age"]=="55+":
   return 55
df_1["Age"]=df_1.apply(age,axis=1)

df_1.corr()["Product_Category"]

sns.heatmap(data=df_1.corr(),annot=True)

"""product catgory is mostly related with Age of the population and Maternal status

###INSIDES

1.	there are 75.31% male customer and 24.69% female customer
2.	age group 26-35 age group customer is most which is 39.92% followed by 36-45 age group(20%) and 18-25 age group(18.12%)
3.	most of the customers are belongs to B catagory states which is around 42.03% followed by C catagory states (31.12%) and A catagory states(26.85%) 
4.	 most of the customers are maried which is around 59.03%
5.	Product catgory 5,1,8 are the hero products
6.	most of the customest are having occupation category of 4,0,7 are the customer of walmat
7.	the men purchase per transaction is higher compare for  man(9278.34) then female(8673.41) 
8.	the mean purchase per transaction for male is widely distributed from a range between 5000 to 1500 where as for female the range is in between 5000to 14000
9.	Average amount spend by Male customers per transaction: 9594.55 Average amount spend by Female customers per transaction: 8884.37
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :['9545.98', '9643.08'] with 95% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :['8815.57', '8951.62'] with 95% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :['9553.44', '9635.47'] with 90% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :['8826.14', '8941.41'] with 90% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Male is in between :['9531.03', '9657.70'] with 99% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Feale is in between :['8794.66', '8975.74'] with 99% confidance interval  

10.	Population mean by Central limit theorem - Male  confidence interval of 99% means per transaction: (9530.93, 9658.16)
Population mean by Central limit theorem - Female  confidence interval of 99% means per transaction: (8794.14, 8974.61)
Population mean by Central limit theorem - Male  confidence interval of 95% means per transaction: (9546.14, 9642.95)
Population mean by Central limit theorem - Female  confidence interval of 95% means per transaction: (8815.71, 8953.04)
Population mean by Central limit theorem - Male  confidence interval of 90% means per transaction: (9553.93, 9635.17)
Population mean by Central limit theorem - Female  confidence interval of 90% means per transaction: (8826.75, 8942.00)
11.	by Boot Strapped Method and Central limit theorem analysis   - Mean of sample means of amount spend per transaction are not over lapped eatch other that means the mean spending for male and female is diffrent
12.	Average amount spend by Unmarried customers per transaction: 9387.57
Average amount spend by Maried customers per transaction: 9402.19
13.	Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :['9339.00', '9464.11'] with 95% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :['9335.38', '9441.19'] with 95% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :['9349.50', '9453.96'] with 90% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :['9343.43', '9431.68'] with 90% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Maried is in between :['9318.76', '9482.79'] with 99% confidance interval  
Population mean by Boot Strapped Method - Mean of sample means of amount spend per transaction for Unmaried is in between :['9319.11', '9456.86'] with 99% confidance interval  

14.	by boot straped method of analysis it is seen that both for maried and unmaried population spending is almost similar
Average amount spend by 0-17 age group customers per transaction is 8920.05
Average amount spend by 18-25 age group customers per transaction is 9346.16
Average amount spend by 26-35 age group customers per transaction is 9415.33
Average amount spend by 36-45 age group customers per transaction is 9504.21
Average amount spend by 46-50 age group customers per transaction is 9401.28
Average amount spend by 51-55 age group customers per transaction is 9426.66             Average amount spend by 55+ age group customers per transaction is 9288.56

15.the puchases of diffrent age group is not same because of diffrent purchase behaviours except 26-35 & 36-45 age group having same purchase behavior
16.	for A B or C catagory state 1,5,8 product catagory are top saleeing product
17.	product catgory is mostly related with Age of the population and Maternal status 
18.for change in sample size(if reduced) then the distribution of means is more but the confidance interval dose not vary much

##Recomandation

1.Men spent more money than women, So company should focus on retaining the male customers and getting more male customers.

2.Product_Category - 1, 5, 8, & 11 have highest purchasing frequency. it means these are the products in these categories are liked more by customers. Company can focus on selling more of these products or selling more of the products which are purchased less.

3.Unmarried customers spend more money than married customers, So company should focus on acquisition of Unmarried customers.

4.Customers in the age 18-45 spend more money than the others, So company should focus on acquisition of customers who are in the age 18-45

5.Male customers living in City_Category C spend more money than other male customers living in B or A, Selling more products in the City_Category C will help the company increase the revenue.

6.to improve the bussiness in catagory A and B states need to improve the logistic and the supply change

7.occupation category of 4,0,7 are the top 3 castomer catagory so there is a need to focous on this catagorical people

8.As unmarried women are the most of the customer of wallmat then maried customer so focus on them , the new product catagory that include must target unmarried women 

9.there are more number of customer who living the current city for 1 years so people who just want to shif to othe city or just sifted accuire them more

10.AS product catagory mostly related to Age so diffrent age sagment produt should be segrigated

11.product catagory 1,5,8 required more inventory as it is more salleing product

12.to increase the sells 20% discount given on the product catagory 1,5,8

13.as the the age group 26-35 and 36-45 are having same purchase behavior so the new catagory that should be listed in walmat should touches the age group of 26-35 and 36-45

##Quetion

4.1.Are women spending more money per transaction than men? Why or Why not? 
ans:no women spending less money per transaction than men
because of diffrent puchase behavior there might be some external matter may involve may incone exposure etc but based on this data set it may not be commented this

4.3.Are confidence intervals of average male and female spending overlapping? 
ans: No confidence intervals of average male and female spending not overlapping
"""